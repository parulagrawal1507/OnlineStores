{"version":3,"sources":["Components/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","props","onGridReady","params","gridApi","api","gridColumnApi","columnApi","state","defaultColDef","width","sortable","resizable","filter","enableRangeSelection","cellClassRules","darkGreyBackground","rowIndex","columnDefs","headerName","field","id","className","style","height","this","rowData","Component","App","fileHandler","event","fileObj","target","files","ExcelRenderer","err","resp","console","log","columns","rows","i","row","Object","keys","forEach","column","setState","Data","handleChange","value","selectedOption","item","category","placeholder","onChange","options","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff9128ce.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport '../Stylesheets/styles.css';\n\n\n\nclass DataTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultColDef: {\n        width: 250,\n        sortable: true,\n        resizable: true,\n        filter: true,\n        enableRangeSelection: true,\n        cellClassRules: {\n          darkGreyBackground: function(params) {\n            return params.rowIndex % 2 === 0;\n          },\n        }\n      },\n      columnDefs:[\n        { headerName: \"Item\", field: \"item\"},\n        { headerName: \"Market Price\", field: \"market_price\"},\n        { headerName: \"Our Price\", field: \"our_price\"},\n      ]\n  }\n};\n\n\n  onGridReady = params => {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi;\n    };\n\n\n  render() {\n    return (\n      <div id=\"myGrid\" className=\"ag-theme-balham\" style={ { height: \"80%\", width:'44%'}}>\n        <AgGridReact\n            // modules={this.state.modules}\n            columnDefs={this.state.columnDefs}\n            rowData={this.props.rowData}\n            defaultColDef={this.state.defaultColDef}>\n        </AgGridReact>\n      </div>\n    )\n  }\n}\n\nexport default DataTable;\n","import React, {Component} from 'react';\nimport './App.css';\nimport DataTable from './Components/DataTable';\nimport Select from 'react-select';\nimport {ExcelRenderer} from 'react-excel-renderer';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: 'All',\n      Data:[],\n      rowData: []\n\n\n  }\n}\n\ncomponentDidMount(){\n  console.log(this.state.selectedOption);\n  if(this.state.selectedOption === 'All'){\n    this.setState({\n      rowData: this.state.Data\n    })\n  }\n}\n\n  fileHandler=(event)=>{\n    let fileObj = event.target.files[0];\n\n    //just pass the fileObj as parameter\n     ExcelRenderer(fileObj, (err, resp) => {\n         if(err){\n           console.log(err);\n         }\n         else{\n            var columns = {\n              'A' : \"item\",\n              'B' : \"market_price\",\n              'C' : \"our_price\",\n              'D' : 'category'\n            }\n            var rowIndex = 1;\n\n            // iterate over the worksheet pulling out the columns we're expecting\n            while (resp.rows[rowIndex]) {\n                var i = 0\n                var row = {};\n                Object.keys(columns).forEach(function(column) {\n                  row[columns[column]] = resp.rows[rowIndex][i];\n                  i++;\n                });\n                this.setState({\n                  Data: [...this.state.Data, row],\n                  rowData: [...this.state.rowData, row]\n                })\n                rowIndex++;\n              }\n            }})\n\n      }\n\n  handleChange = (value) => {\n    this.setState(\n      { selectedOption: value,\n        rowData: this.state.Data.filter(item => item.category === value.value)},\n    );\n    if(value.value === 'All'){\n      this.setState({\n        rowData: this.state.Data\n      })\n    }\n  }\n\n  render(){\n    const options = [\n      { label: 'Fruits', value: 'Fruits'},\n      { label: 'Grocery', value: 'Grocery'},\n      { label: 'Vegetables', value: 'Vegetables'},\n      { label: 'Beverages', value: 'Beverages'},\n      { label: 'All', value: 'All'},\n    ];\n    return (\n\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Sunrise Store (Sec-76)</h2>\n          <div className = \"Contact-Info\">\n          <label>Phone No: 9953200774</label>\n          <label>Paytm No: 8882326951</label>\n          </div>\n        </div>\n        <div className=\"Info\">\n          <Select\n          placeholder=\"Select...\"\n          value={this.state.selectedOption}\n          onChange={this.handleChange}\n          options={options}\n          className = \"select-filter\"\n          />\n          <DataTable\n          rowData = {this.state.rowData}/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}